import Mathlib.RingTheory.PowerSeries.Basic
import Mathlib.Analysis.Matrix
import Mathlib.Analysis.NormedSpace.Exponential
import Mathlib.Data.Matrix.Basic
import Mathlib.Algebra.Ring.Defs
import Mathlib.Analysis.Calculus.Deriv.Basic


namespace Test1

  -- We first need to open the appropriate namespaces
  open PowerSeries
  open Ring

  -- Define the formal power series in the ring of integers
  noncomputable def natPowerSeries : PowerSeries ‚Ñï :=
    PowerSeries.mk (Œª n ‚Ü¶ n+1)

  noncomputable def myPower : PowerSeries ‚Ñï :=
    PowerSeries.X

  theorem equiv2 : (PowerSeries.coeff ‚Ñï 1) myPower = 1 := by
    simp [myPower]


  -- Lets try multivariate power series


  theorem eqiv2 : (PowerSeries.coeff ‚Ñï) 1 myPower  = 1 := by
    simp [myPower]
  /-
    #print equiv2
    #check (PowerSeries.coeff ‚Ñï) 1 myPower  = 1
    #check LinearMap.proj myPower  1
   -/


  def test1 (x : ‚Ñï) := 3 + x
  def test2 (x : ‚Ñï) := 3 + x


  theorem test3 : 6 = 3 + 3 := by simp

  #print test3


  theorem check [Ring ‚Ñï ] (x : ‚Ñï) : test1 x + test2 x = 6 + 2 * x := by
    unfold test1
    unfold test2
    rw [‚Üê add_assoc]
    rw [two_mul]
    rw [‚Üê  add_assoc]
    have h‚ÇÄ (x : ‚Ñï ) : 3 + x + 3 + x = 3 + 3 + x + x := by sorry
    rw [h‚ÇÄ]

  theorem testSeries : PowerSeries ‚Ñï :=
    Œª x ‚Ü¶ (x 0 + 1)

end Test1


namespace TestDerivative

  def myFun (x:‚Ñù ) := 3 + 2*x

  #check (deriv myFun)

  /-
    Probably use something like this:

    https://leanprover-community.github.io/
    mathlib4_docs/Mathlib/Analysis/
    Calculus/Deriv/Basic.html#deriv_eq
  -/
  theorem testDeriv (x: ‚Ñï) : (deriv myFun x) = 1 := sorry

end TestDerivative


/-

Maybe use this Taylor Within?
https://leanprover-community.github.io/mathlib4_docs/
Mathlib/Analysis/Calculus/Taylor.html
-/
namespace TimeOrderedProduct
  open Matrix

  variable {n : ‚Ñï} {H H‚ÇÄ H‚ÇÅ: Matrix (Fin n) (Fin n) ‚Ñù}
  variable {f : ‚Ñù ‚Üí ‚Ñù }

  noncomputable def S (t: ‚Ñù ):= exp ‚Ñù (t ‚Ä¢ H)
  noncomputable def S‚ÇÄ (z : ‚Ñï ) (t: ‚Ñù ):= exp ‚Ñù (t ‚Ä¢ H‚ÇÄ + H‚ÇÅ * z)

  #check S ‚Ä¢ (8: ‚Ñù)

  instance normedAddCommGroup : NormedAddCommGroup (Matrix (Fin n) (Fin n) ‚Ñù) :=
    sorry

  instance normedSpace : NormedSpace ‚Ñù (Matrix (Fin n) (Fin n) ‚Ñù) :=
    sorry

  instance nontriviallyNormedField : NontriviallyNormedField ‚Ñï := sorry

  instance nontriviallyNormedFieldUnit : NontriviallyNormedField (Unit ‚Üí‚ÇÄ ‚Ñï) := sorry

  instance normedSpaceUnit : NormedSpace (Unit ‚Üí‚ÇÄ ‚Ñï )  (Matrix (Fin n) (Fin n) ‚Ñù) :=
    sorry
  instance normedAddCommGroupR :  NormedAddCommGroup (‚Ñù ‚Üí (Matrix (Fin n) (Fin n) ‚Ñù)) :=
    sorry
  instance normedSpaceR : NormedSpace ‚Ñï  (‚Ñù ‚Üí Matrix (Fin n) (Fin n) ‚Ñù) :=
    sorry


  #check S
  #check deriv S 0
  #check deriv S‚ÇÄ 0
  #check S
  #print PowerSeries


  theorem generatingFunction2 (t: ‚Ñù ) : PowerSeries (Matrix (Fin n) (Fin n) ‚Ñù) :=
    Œª z ‚Ü¶ (exp ‚Ñù (t ‚Ä¢ (H‚ÇÄ + H‚ÇÅ * (z 1))))

  noncomputable def test (t : ‚Ñù) := Œª (z: ‚Ñï) ‚Ü¶ exp ‚Ñù (t ‚Ä¢ H‚ÇÄ + H‚ÇÅ * z)

  -- We need to do derivative of S at z = 0

  /-
    exp((t‚¨ùH)) = exp(t(H‚ÇÄ +H‚ÇÅ))
  -/
  theorem addMatrixSplit (t: ‚Ñù ) : (H = H‚ÇÄ + H‚ÇÅ) ‚Üí ‚àÉ (P‚ÇÄ : ‚Ñù) , exp ‚Ñù (t ‚Ä¢ H) = P‚ÇÄ ‚Ä¢ (exp ‚Ñù (t ‚Ä¢ (H‚ÇÄ + H‚ÇÅ))) := sorry

  #print deriv

  -- variable {ùïú : Type u} [NontriviallyNormedField ùïú]
  -- variable {F : Type v} [NormedAddCommGroup F] [NormedSpace ùïú F]

  #check Nat.rec

  /-
    Use Iterative Derivative
    https://leanprover-community.github.io/mathlib4_docs
    /Mathlib/Analysis/Calculus/
    IteratedDeriv.html#iteratedDerivWithin
  -/

  def check (f : ‚Ñï ‚Üí ‚Ñï ) (x : ‚Ñï ): ‚Ñï ‚Üí ‚Ñï
  | 0 => f x
  | n => (check f x) n-1
  termination_by check f x n => n -1
  decreasing_by
    simp_wf

  def nthDerivative {ùïú : Type u} {F : Type v} [NontriviallyNormedField ùïú] [NormedAddCommGroup F] [NormedSpace ùïú F] (f : ùïÇ ‚Üí F) (x : ùïÇ) : ‚Ñï ‚Üí F
    | 0 => f x
    | n => (nthDerivative (deriv f) x (n-1))
  decreasing_by sorry

  /-
    Q: Relate Unit ‚Üí‚ÇÄ ‚Ñï to deriviative?

    Need to understand how coefficient extraction
    really works underneath the hood.

    The goal is to count how many times z is applied.
    ‚àë‚Çñ‚Çå‚ÇÄ to ‚àû (‚àÇ^k wrt z exp(t(H‚ÇÄ + H‚ÇÅz)))z=0 * p‚ÇÄ
  -/

  theorem generatingFunction‚ÇÄ (t: ‚Ñù ) : PowerSeries (Matrix (Fin n) (Fin n) ‚Ñù) :=
    Œª z ‚Ü¶ nthDerivative (Œª _ ‚Ü¶ (exp ‚Ñù (t ‚Ä¢ (H‚ÇÄ + H‚ÇÅ * (z 1))))) z 0

  theorem generatingFunction (t: ‚Ñù ) : PowerSeries (Matrix (Fin n) (Fin n) ‚Ñù) :=
    deriv (Œª z ‚Ü¶ (exp ‚Ñù (t ‚Ä¢ (H‚ÇÄ + H‚ÇÅ * (z 1)))))


/-
  Note in general we want to prove the following
  theorem:

  exp(t(H‚ÇÅ + H‚ÇÄ)) = ‚àë‚Çñ‚Çå‚ÇÄ to ‚àû (‚à´dœÑ‚ÇÄ ‚Ä¶ ‚à´dœÑ‚Çñ(
        ‚àë‚Çö‚Çå‚ÇÅ to k (œÑ‚Çö - t)
      )
    exp(œÑ‚ÇñH‚ÇÄ)H‚ÇÅ ‚Ä¶ exp(œÑ‚ÇÄH‚ÇÄ)H‚ÇÅ
  )
-/

end TimeOrderedProduct
